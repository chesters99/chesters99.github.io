<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>GCHESTER.COM</title><link href="http://chesters99.github.io/" rel="alternate"></link><link href="http://chesters99.github.io/feeds/getting-started.atom.xml" rel="self"></link><id>http://chesters99.github.io/</id><updated>2016-10-18T00:00:00+01:00</updated><entry><title>Getting Started - Useful Training</title><link href="http://chesters99.github.io/useful-training.html" rel="alternate"></link><published>2016-10-18T00:00:00+01:00</published><updated>2016-10-18T00:00:00+01:00</updated><author><name>Graham Chester</name></author><id>tag:chesters99.github.io,2016-10-18:useful-training.html</id><summary type="html">&lt;h3&gt;Python Online Training&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Udemy.com - Python For Data Structures, Algorithms, and Interviews - Jose Portilla&lt;/em&gt;&lt;/strong&gt; -
A hugely comprehensive intermediate level course focussing on Python from a getting-a-job-perspective. Just do it. Covers everything from how to prepare a resume, to programming techniques likely to be in job interviews. There are often Udemy discount periods, or discount vouchers available online to reduce the course cost. US$19 for 20+ hours of video - excellent value!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Youtube Videos&lt;/em&gt;&lt;/strong&gt; -
So many of these, so where to start... I started with videos from old PyCon conferences for a broad range of topics in the Python world. Checkout Raymond Hettinger for some amazing advice.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Django Online Training&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Youtube - GoDjango&lt;/em&gt;&lt;/strong&gt; -
A great range of free Django videos. The author has additional paid-for videos on his website.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Youtube - DjangoCon&lt;/em&gt;&lt;/strong&gt; -
Old DjangoCon videos offer a broad range of interesting topics and tutorials.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Data Science Online Training&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Coursera.com - Machine Learning (Stanford University) - Andrew Ng&lt;/em&gt;&lt;/strong&gt;
A great course - though heavy on the theory. If your linear algebra and calculus arent great then it may be a struggle, but if your maths is up to it, this is the definitive machine learning course. Unfortunately for Pythonistas the exercises are in Matlab. Andrew Ng is a founder of Coursera and is on a mission to provide quality education to all - to that end, the course is free if you dont need a certificate at the end. Good on you Andrew!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Udemy.com - Learning Python for Data Analysis and Visualisation - Jose Portilla&lt;/em&gt;&lt;/strong&gt; -
Another great course by Jose (see above). Takes a very hands-on/practical approach to data analysis. Not overly theorectical. Discount vouchers are often available - google it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Udemy.com - Data Science and Machine Learning with Python - Frank Kane&lt;/em&gt;&lt;/strong&gt; - 
Frank gives a comprehensive and practical overview of many machine learning algorithms - a great course. Discount voouchers are often available -google it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Youtube - PyData&lt;/em&gt;&lt;/strong&gt; -
Old PyData videos offer a broad range of interesting topics and tutorials.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;In-person training&lt;/h3&gt;
&lt;p&gt;I've only attended Data Science courses with Cambridge Coding Academy in London, UK - really great people who know their stuff.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;</summary><category term="Python"></category><category term="Data Science"></category><category term="Getting Started"></category></entry><entry><title>Getting Started - Python Environment</title><link href="http://chesters99.github.io/useful-tools.html" rel="alternate"></link><published>2016-10-17T00:00:00+01:00</published><updated>2016-10-17T00:00:00+01:00</updated><author><name>Graham Chester</name></author><id>tag:chesters99.github.io,2016-10-17:useful-tools.html</id><summary type="html">&lt;h3&gt;Python&lt;/h3&gt;
&lt;p&gt;There are a number of Python run-times (interpreters and compilers) available. The one most used is called &lt;strong&gt;&lt;em&gt;CPython&lt;/em&gt;&lt;/strong&gt; (because it is written in C). It is installed by default on Linux and Macs, and can be installed on Windows (see below for Windows).&lt;/p&gt;
&lt;p&gt;Unfortuantely there are two versions of Python (2 and 3). Python 3 was released as a replacement for Python 2 but due to the need to make some substantial improvements, they are not particularly compatible. Sure with a bit of effort you can write code that will run on both, but few developers seem to to that.  There is a very large code base on Python 2 which would require an enormous effort to migrate to 3, and yet 2 is planned to be de-supported by 2020.... is there an elephant in the room?  The latest release of Python 2 is Python 2.7 - there will be no more Python 2 releases apparently. As of the date of this blog, the latest release of Python 3 is Python 3.5 with Python 3.6 due soon.&lt;/p&gt;
&lt;p&gt;There are a number of other Python run-times available such as:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Numba&lt;/em&gt;&lt;/strong&gt; - JIT (just in time) compiler offering massive speed improvements compared to CPython. Generally should be used to speed up problem code only, rather than be applied universally&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Cython&lt;/em&gt;&lt;/strong&gt; - Python compiler with additional syntax to declare variable types. Compiles to C code, then to machine code. Also offers masive speed improvements compared to CPython - at the expense of compatible syntax. Generally should be used to speed up problem code only, rather than be applied universally. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Jython&lt;/em&gt;&lt;/strong&gt; - Python interpreter that generates Java byte code to run on the Java virtual machine&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Iron Python&lt;/em&gt;&lt;/strong&gt; - Python intepreter that runs on the Microsoft C# platform&lt;/p&gt;
&lt;p&gt;Confused? Unless you have a very specific environment or a major performance issue, just use Python 3 (Cpython) if you can, or Python 2 (CPython) if you must.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Python Editors/IDEs&lt;/h3&gt;
&lt;p&gt;There are a number of Python Editors/IDEs (Integrated Development Environments) available. Editors purely edit the code usually with some syntax checking, whereas IDE's provide a workbench covering debugging, database manipulation, command line access, etc etc.&lt;/p&gt;
&lt;p&gt;Popular editors include Vim or Emacs (not that easy to learn. often used by those with a Linux/Unix background). Notepad++ for Windows or Sublime Text for Mac.&lt;/p&gt;
&lt;p&gt;IDE include PyCharm (my favourite, but not cheap), and Spyder (Free). An IDE can be a lot to learn initially as there is so much going on on the screen, but once used to it they are my recommended option (see Books I recommend blog post for 'Mastering PyCharm'. &lt;/p&gt;
&lt;p&gt;But many people prefer a simpler setup using a sophisticated editor such as Sublime Text.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Operating Systems&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Windows -&lt;/em&gt;&lt;/strong&gt; has been something of a neglected platform in the Python world as 'serious' developers use Linux or Mac..... but I think it hasnt been a great idea to alienate used of the most popular OS by far. Anyway life is much better now for Windows users with the release of Anaconda by Continuum Analytics. It's a free download and I would suggest dont even think of any another approach if you ar a Windows user. Note though it does come with a LOT of packages pre-installed! Note also that some Python packages require a C compiler to install and Windows does not come with one pre-installed. Consider mingw for something lightweight, or Visual Studio for the gorilla approach.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mac OS -&lt;/em&gt;&lt;/strong&gt; is well supported and in fact comes with Python 2 pre-installed. I suggest you install Homebrew, and then Python 3, or if you plan to do some data analysis/science then Anaconda is your friend. Personally I find the Mac provides the best combination of user-friendly GUI, and a unix-like system under the hood to support development.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Linux -&lt;/em&gt;&lt;/strong&gt; comes in many flavours, though Linux Mint and Ubuntu seem to be the leaders. Personally I found I needed a lot of Linux knowledge to figure out how to fix things when they went wrong. While Linux has made great strides in user-friendliness in recent years, due to past struggles I prefer to see it in the server-space rather than the desktop (personal opinion only!)
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Development Utilities&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Unittest or Pytest-&lt;/em&gt;&lt;/strong&gt; for testing. Write tests as you go and run them frequently. It's painful and wastes time to let your code get to far ahead of your test scripts. &lt;/p&gt;
&lt;p&gt;TBC.......&lt;/p&gt;</summary><category term="Python"></category><category term="Getting Started"></category></entry><entry><title>Getting Started - Useful Books</title><link href="http://chesters99.github.io/useful-books.html" rel="alternate"></link><published>2016-10-16T00:00:00+01:00</published><updated>2016-10-16T00:00:00+01:00</updated><author><name>Graham Chester</name></author><id>tag:chesters99.github.io,2016-10-16:useful-books.html</id><summary type="html">&lt;p&gt;Below are a number of Python-related books that I've found useful. No links are included as things move around - so Google is your friend.&lt;/p&gt;
&lt;h3&gt;Beginner&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Python 3 Object Oriented Programming - Dusty Philips (Not Free)&lt;/em&gt;&lt;/strong&gt; -
A good starting point for beginners to Python and who may not have much or any object oriented programming experience&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Dive Into Python - Mark Pilgrim (Free)&lt;/em&gt;&lt;/strong&gt; -
An excellent intro to Python and it's free! Good on you Mark.....&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Learn Python the Hard Way - (Sort of Free)&lt;/em&gt;&lt;/strong&gt; -
The book is available as HTML pages on the authors website, but if you want the hardcopy or PDF then you can buy from several places listed on the authors website.
The author drives you hard to enter and run all the exercises yourself. He's tough but once you've finished you should find the content 'sticks' much more than just reading or tinkering.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Data Wrangling with Python - Katharine Jarmul -&lt;/em&gt;&lt;/strong&gt;
An excellent introduction to getting data from the web, cleaning and analyzing. Covers a lot of ground simply, and with useful 'further reading options'
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Upper-Beginner&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Writing Idiomatic Python - Jeff Knupp (Not Free)&lt;/em&gt;&lt;/strong&gt; - 
Once you've got some of the basics then you might as well learn how to do things properly. The author details how you might write code in another language (eg C) and how that approach should be done in a Pythonic manner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;The Little Book of Pythn AntiPatterns (Free)&lt;/em&gt;&lt;/strong&gt; - 
How NOT to write Python - good companion for the Jeff Knupp book above&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Effective Python: 59 Specific Ways to Write Better Python&lt;/em&gt;&lt;/strong&gt; -
Excellent book on how to ermmm write better Python. My personal favorite.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Mastering PyCharm - Quazi Nafiul Islam (Not Free)&lt;/em&gt;&lt;/strong&gt; -
Once you get to the point of wanting to write a 'proper' program, you'll need some sort of development environment (see my other blog post on Python Development Tools. PyCharm is a great choice if you're happy to pay for it, and this is a great book on how to best use what can be a daunting product when first used.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Intermediate&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Python Cookbook - David Beazely (Not Free)&lt;/em&gt;&lt;/strong&gt; -
An comprehensive reference of algorithms and how to implement them in Python. Perhaps better dipped into when you need to rather than an end-to-end read.
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Intermediate to Advanced&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;The Elements of Statistical Learning - Trevor Hastie -&lt;/em&gt;&lt;/strong&gt;
The bible of machine learning
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Web Development Frameworks&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Flask Web Development: Developing Web Application with Flask - Miguel Grinberg&lt;/em&gt;&lt;/strong&gt; -
The bible for the Flask framework, but very accesible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Django Unleashed - Andrew Pinkham&lt;/em&gt;&lt;/strong&gt; -
An excellent reference to the Django framework.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;High Performance Django - Peter Baumgartner&lt;/em&gt;&lt;/strong&gt; -
A more advanced book on tuning Django - lots of very practical advice for those running websites where performance is a concern.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Two Scoops of Django - Daniel Roy Greenfeld, Audrey Roy&lt;/em&gt;&lt;/strong&gt; -
A definitive book on how to approach Django project the right way - best read after you know a bit of Django already, but not too much that you have a fully established way of working
&lt;br&gt;&lt;br&gt;&lt;/p&gt;</summary><category term="Python"></category><category term="Getting Started"></category></entry></feed>